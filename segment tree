
// ---------------------segment tree for storing maximum in given range

int a[100005];
int seg[4*100005] ;

void build(int ind, int low, int high){
    if(low==high){
        seg[ind]= a[low];
        return ;
    }
    int mid=(low+high)/2 ;
    build(2*ind+1, low, mid) ;
    build(2*ind+2, mid+1, high) ;

    seg[ind]= max(seg[2*ind+1], seg[2*ind+2]) ;
}

int query(int ind, int lo, int hi, int l, int r){
    if(l<=lo && r>=hi){
        return seg[ind];
    }
    if(l>hi || r<lo) return INT_MIN ;
    int mid=(lo+hi)/2 ;
    int left= query(ind*2+1, lo, mid, l,r);
    int right= query(2*ind+2, mid+1,hi,l,r);

    return max(left,right);
}

//--------------single update
// -----------storing sum in given range

void pointupdate(int ind, int lo, int hi, int node, int val){
    if(lo==hi) seg[ind]+=val ;
    else{
        int mid=(lo+hi)/2 ;
        if(node<=mid && node>=lo){
            pointupdate(2*ind+1,lo,mid,node,val) ;
        }
        else pointupdate(2*ind+2, mid+1,high,node,val) ;

        seg[ind]= seg[ind*2+1]+ seg[ind*2+2] ;
    }
}


//------------------range update
// l,r ->range to inrease value with val

void rangeupdate(int ind, int lo, int hi, int l, int r, int val){
    if(lazy[ind]!=0){
        seg[ind]+= (hi-lo+1)*lazy[ind] ;
        if(lo!=hi){
            lazy[2*ind+1]+= lazy[ind] ;
            lazy[2*ind+2]+= lazy[ind] ;
        }
        lazy[ind]=0 ;
    }

    if(lo>r || hi<l || lo>hi) return ;

    if(l<=lo && hi<=r){
        seg[ind]+= (hi-lo+1)*val ;
        if(lo!=hi){
            lazy[2*ind+1]+=val;
            lazy[2*ind+2]+=val;
        }
        return;
    }

    int mid=(lo+hi)/2;
    rangeupdate(2*ind+1,lo,mid,l,r,val);
    rangeupdate(2*ind+2, mid+1, hi,l,r,val);
    seg[ind]= seg[2*ind+1]+ seg[2*ind+2] ;
}

int querysumlazy(int ind, int lo, int hi, int l, int r, int val){
    if(lazy[ind]!=0){
        seg[ind]+=(hi-lo+1)*lazy[ind] ;
        if(lo!=hi){
            lazy[2*ind+1]+= lazy[ind] ;
            lazy[2*ind+2]+=lazy[ind] ;
        }
        lazy[ind]=0 ;
    }
    if(r<lo || l>hi || l>r) return 0;
    if(l<=lo && r>=hi){
        return seg[ind];
    }
    int mid=(lo+hi)/2 ;
    return querysumlazy(2*ind+1,lo,mid,l,r,val)+
    querysumlazy(2*ind+2, mid+1,hi,l,r,val) ;

    
}



void solve(){
    int n ;
    cin >> n ;
    for(int i=0 ;i<n; i++){
        cin >> a[i] ;
    }
    build(0,0,n-1) ;
    int q ;
    cin >> q ;

    while(q--){
        int l, r ;
        cin>>l>>r ;
        cout<< query(0,0,n-1,l,r)<<endl;
    }


}

